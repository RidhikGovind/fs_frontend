{"version":3,"sources":["components/Note.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","content","onClick","baseUrl","axios","get","then","response","data","newObj","post","id","put","App","props","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","useEffect","noteService","initialNotes","notestoshow","filter","important","className","map","find","toBeUpdatednoteObj","importance","console","log","returnedNote","catch","err","alert","n","toggleImportanceOf","onSubmit","e","preventDefault","noteObj","date","Date","toISOString","Math","random","length","concat","value","onChange","target","type","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6MAceA,MAZf,YAA0C,IAA1BC,EAAyB,EAAzBA,KAAKC,EAAoB,EAApBA,iBAEpB,OACC,8BACC,+BACED,EAAKE,QACN,wBAAQC,QAASF,EAAjB,yB,gBCIEG,EAAU,aAqBD,EAnBA,WAMd,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAa3B,EAVA,SAACC,GAEf,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAACC,GAAD,OAAcA,EAASC,SAQ7B,EALA,SAACG,EAAIF,GAEnB,OADgBL,IAAMQ,IAAN,UAAaT,EAAb,YAAwBQ,GAAMF,GAC/BH,MAAK,SAACC,GAAD,OAAcA,EAASC,SC6D7BK,MAtFf,SAAaC,GACZ,MAA0BC,mBAASD,EAAME,OAAzC,mBAAOA,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,gBAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KAGAC,qBAAU,WACTC,IAAqBjB,MAAK,SAACkB,GAC1BP,EAASO,QAER,IAEH,IA+CMC,EAAcL,EACjBJ,EACAA,EAAMU,QAAO,SAAC3B,GAAD,OAA6B,IAAnBA,EAAK4B,aAE/B,OACC,sBAAKC,UAAU,MAAf,UACC,uCACA,wBAAQ1B,QAAS,kBAAMmB,GAAYD,IAAnC,SACEA,EAAU,YAAc,QAE1B,6BACEK,EAAYI,KAAI,SAAC9B,GAAD,OAChB,cAAC,EAAD,CAECA,KAAMA,EACNC,iBAAkB,kBAnCI,SAACW,GAC3B,IAAMZ,EAAOiB,EAAMc,MAAK,SAAC/B,GAAD,OAAUA,EAAKY,KAAOA,KAExCoB,EAAkB,2BAAQhC,GAAR,IAAciC,YAAajC,EAAK4B,YACxDM,QAAQC,IAAIH,GACZR,EACSZ,EAAIoB,GACXzB,MAAK,SAAC6B,GAAD,OACLlB,EAASD,EAAMa,KAAI,SAAC9B,GAAD,OAAWA,EAAKY,KAAOA,EAAKZ,EAAOoC,SAEtDC,OAAM,SAACC,GACPC,MAAM,YAAD,OAAavC,EAAKE,QAAlB,yCACLgB,EAASD,EAAMU,QAAO,SAACa,GAAD,OAAOA,EAAE5B,KAAOA,SAuBZ6B,CAAmBzC,EAAKY,MAF3CZ,EAAKY,SAMb,uBAAM8B,SAlEQ,SAACC,GAChBA,EAAEC,iBACF,IAAMC,EAAU,CACf3C,QAASiB,EACT2B,MAAM,IAAIC,MAAOC,cACjBpB,UAAWqB,KAAKC,SAAW,GAC3BtC,GAAIK,EAAMkC,OAAS,GASpB3B,EAAmBqB,GAAStC,MAAK,SAAC6B,GACjClB,EAASD,EAAMmC,OAAOhB,IACtBhB,EAAW,OAGZF,EAASD,EAAMmC,OAAOP,IACtBzB,EAAW,KA6CV,UACC,uBAAOiC,MAAOlC,EAASmC,SAxBD,SAACX,GACzBvB,EAAWuB,EAAEY,OAAOF,UAwBlB,wBAAQG,KAAK,SAAb,yBC5DJC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,CAAK1C,MAvBK,CACZ,CACEL,GAAI,EACJV,QAAS,eACT4C,KAAM,2BACNlB,WAAW,GAEb,CACEhB,GAAI,EACJV,QAAS,sCACT4C,KAAM,2BACNlB,WAAW,GAEb,CACEhB,GAAI,EACJV,QAAS,+DACT4C,KAAM,2BACNlB,WAAW,QAQbgC,SAASC,eAAe,W","file":"static/js/main.a51c0aec.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Note({ note,toggleImportance }) {\n\n\treturn (\n\t\t<div>\n\t\t\t<li>\n\t\t\t\t{note.content}\n\t\t\t\t<button onClick={toggleImportance}>Press</button>\n\t\t\t</li>\n\t\t</div>\n\t);\n}\n\nexport default Note;\n","import axios from 'axios';\n/**\n * since we have deployed the server to heroku, we can use the base url as: \n * https://fullstack-backend9999.herokuapp.com/api/notes\n * \n * - second case scenerio is: what if we take the 'build' folder of the frontend and copy it to backend\n * and then deploy the built static files through the server?? Awesome isnt it !\n * -- when this happens, this app works like a single-page-app, \n * --- and the frontend and the backend has the same '/' home route, the base url can be made `relative`\n * ---- \n */\n// const baseUrl = 'https://fullstack-backend9999.herokuapp.com/api/notes';\nconst baseUrl = '/api/notes';\n\nconst getAll = () => {\n\t/**\n\t * what we are doing is, we are simply calling the '/' route and \n\t * grabbing and returning the response data \n\t */\n\tconst request = axios.get(baseUrl);\n\treturn request.then(response => response.data)\n};\n\nconst create = (newObj) => {\n\tconst request = axios.post(baseUrl, newObj);\n\treturn request.then((response) => response.data);\n};\n\nconst update = (id, newObj) => {\n\tconst request = axios.put(`${baseUrl}/${id}`, newObj);\n\treturn request.then((response) => response.data);\n};\n\nexport default {\n\tgetAll,\n\tcreate,\n\tupdate,\n};\n","import { useState, useEffect } from 'react';\nimport './App.css';\nimport Note from './components/Note';\nimport noteService from './services/notes';\n\nfunction App(props) {\n\tconst [notes, setNotes] = useState(props.notes);\n\tconst [newNote, setNewNote] = useState('Enter a note');\n\tconst [showAll, setShowAll] = useState(true);\n\n\t//fetching the api from the server and setting the 'newNote' state\n\tuseEffect(() => {\n\t\tnoteService.getAll().then((initialNotes) => {\n\t\t\tsetNotes(initialNotes);\n\t\t});\n\t}, []);\n\n\tconst addNote = (e) => {\n\t\te.preventDefault();\n\t\tconst noteObj = {\n\t\t\tcontent: newNote,\n\t\t\tdate: new Date().toISOString(),\n\t\t\timportant: Math.random() < 0.5,\n\t\t\tid: notes.length + 1,\n\t\t};\n\n\t\t/**\n\t\t * - sending the newnoteobj to the server\n\t\t * - then grabbing the returnedNote from the server\n\t\t * - and updating the 'notes' state which will update the\n\t\t * current list of notes.\n\t\t */\n\t\tnoteService.create(noteObj).then((returnedNote) => {\n\t\t\tsetNotes(notes.concat(returnedNote));\n\t\t\tsetNewNote('');\n\t\t});\n\n\t\tsetNotes(notes.concat(noteObj));\n\t\tsetNewNote('');\n\t};\n\n\t/**\n\t * create a function to toggle the importance of each note\n\t */\n\tconst toggleImportanceOf = (id) => {\n\t\tconst note = notes.find((note) => note.id === id);\n\t\t// console.log(note);\n\t\tconst toBeUpdatednoteObj = { ...note, importance: !note.important };\n\t\tconsole.log(toBeUpdatednoteObj);\n\t\tnoteService\n\t\t\t.update(id, toBeUpdatednoteObj)\n\t\t\t.then((returnedNote) =>\n\t\t\t\tsetNotes(notes.map((note) => (note.id !== id ? note : returnedNote)))\n\t\t\t)\n\t\t\t.catch((err) => {\n\t\t\t\talert(`the note ${note.content} was already deleted from the server`);\n\t\t\t\tsetNotes(notes.filter((n) => n.id !== id));\n\t\t\t});\n\t};\n\n\tconst handleNoteChange = (e) => {\n\t\tsetNewNote(e.target.value);\n\t};\n\n\tconst notestoshow = showAll\n\t\t? notes\n\t\t: notes.filter((note) => note.important === true);\n\n\treturn (\n\t\t<div className='App'>\n\t\t\t<h1>Notes</h1>\n\t\t\t<button onClick={() => setShowAll(!showAll)}>\n\t\t\t\t{showAll ? 'important' : 'all'}\n\t\t\t</button>\n\t\t\t<ul>\n\t\t\t\t{notestoshow.map((note) => (\n\t\t\t\t\t<Note\n\t\t\t\t\t\tkey={note.id}\n\t\t\t\t\t\tnote={note}\n\t\t\t\t\t\ttoggleImportance={() => toggleImportanceOf(note.id)}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t</ul>\n\t\t\t<form onSubmit={addNote}>\n\t\t\t\t<input value={newNote} onChange={handleNoteChange} />\n\t\t\t\t<button type='submit'>Save</button>\n\t\t\t</form>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nconst notes = [\n  {\n    id: 1,\n    content: 'HTML is easy',\n    date: '2019-05-30T17:30:31.098Z',\n    important: true\n  },\n  {\n    id: 2,\n    content: 'Browser can execute only JavaScript',\n    date: '2019-05-30T18:39:34.091Z',\n    important: false\n  },\n  {\n    id: 3,\n    content: 'GET and POST are the most important methods of HTTP protocol',\n    date: '2019-05-30T19:20:14.298Z',\n    important: true\n  }\n]\n\nReactDOM.render(\n  <React.StrictMode>\n    <App notes={notes}/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}